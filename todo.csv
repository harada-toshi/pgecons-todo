,,,,,
,,,,,
「基幹領域への適用におけるPostgreSQLの抱える課題」(2012/5/28)のその後の状況,,,2016-07-01,,
,,,,,
項番,概要,現状(当時),解決のアプローチ(当時),「解決のアプローチ」の現時点での技術的状況,開発コミュニティへのフィードバック候補
1,オンライン業務に対する性能モデルがない,・一般的なベンチマークツール（DBT-1/DBT-2）を利用,①性能モデルの構築/机上評価シートの作成,作成されていない,
2,バッチ業務に対する性能モデルがない,・一般的なベンチマークツールを利用,①性能モデルの構築/机上評価シートの作成,作成されていない,
3,統計分析処理（BIなど）に対する性能モデルがない,・一般的なベンチマークツール（DBT-3）を利用,①性能モデルの構築/机上評価シートの作成,作成されていない,
4,大容量データ処理に対する性能モデルがない,パーディショニングおよびサーバの分散で対処,①性能モデルの構築/机上評価シートの作成,作成されていない,
5,CPUマルチコアに対する性能懸念,・PostgreSQL 9.2では64コアまで（公表値）,"性能検証結果の公開
※性能検証の結果、マルチコア処理に何か課題があった場合は、開発コミュニティへフィードバック",ＷＧ１にて80コアまでスケールする検証結果を公開済み,○
6,負荷分散方式が確立されていない,"・PostgreSQL-XC
・pgpool-II（参照のみ）",完全同期,最新のpgpool-IIでは非同期レプリケーションでも最新の検索結果をなるべく保証するチューニングが可能になる,
7,同期レプリケーション方式が確立されていない,"Postgres-XCまたはpgpool-IIで対処
ただしPostgres-XCは現状信用性が低く、pgpool-IIでの実現は動作性能低下とのバータとなる",Postgres-XCの性能向上に期待,PostgreSQL-XLが開発されている,
8,クエリキャッシュ機能がない,テーブルを全部メモリ上に持って行き、memcached等メモリキャッシュを使うことで対処,,pgpool-IIのクエリキャッシュも利用可能,
9,パーティショニング機能の不足,アプリケーションがパーティション数の制限を意識したテーブル設計を行い、テーブルごとのパーティション数を制限する。,"・100パーティションを超える場合の構築ノウハウの公開
・パーティションの実装",大容量データのパーティショニングについて検証結果をWG1で報告済み。技術的な課題あり。,○
10,チューニングノウハウの不足,・pgtune()による自動設定（8.xまで）,"①チューニングノウハウの集約
②（①の応用として）自動環境設定ツールのエンハンス",チューニングノウハウの集約は行われていない,
11,実行計画が制御できない,"コスト計算用のパラメータチューニングと、アクセスメソッド、JOINの手法レベルでのチューニング。
テーブルやインデックス定義の見直し（非正規化）やクエリの記述方法の変更による回避。","・性能観点での定義、クエリ記述、パラメータ、物理設計チューニングガイドの提示
・Oracle型のHINT情報の提示
http://wiki.postgresql.org/wiki/Todo#Features_We_Do_Not_Want",pg_hint_planというOSSツールが公開されている。,
12,コストベースオプティマイザに対する不安,同上,同上,同上,
13,初期ロードが遅い,・bulkloadの利用,,変わりなし,
14,サイジング手法が確立されていない,"・社内の一般的なベンチマーク情報、サイズ見積もり手法の提供
・1/nモデルでの検証","ケース別のベンチマーク情報の提供
サイジングTOOLの作成・提供",サイジング情報は公開されていない。,
15,更新系の性能が悪い,,,詳細不明,
16,非IA系CPUアーキテクチャとの相性が悪い,非IA系CPUがSPARC系の場合NUMA構成に問題があるため、現状対処方法が無い。,,変わりなし,
17,高可用クラスタ方式が確立されていない,"・Slony＋HeartBeat構成
・pgpoolII＋HeartBeat構成
・LifeKeeperなどクラスタリング製品構成",,WG3にてpgpool-IIによる高可用性構成を検証済み,
18,クラスタ切り替え時間が遅い,,,false positiveとのバーター？,
19,リモートバックアップ方式（非同期レプリケーション方式）が確立されていない,,,詳細不明,
20,サービスレベルが不明確,障害を発見したら開発コミュニティに報告を行なう,パッチが作成・公開され等、障害発生からコミュニティが対処を終了するまでにかかった時間等の過去事例を収集・提供する,非技術項目,
21,サービスレベルの低下,サービスを行なう各社それぞれが低下しない努力をする,各社のサービス状況を広報する,非技術項目,
22,"サポート体制に対する不安
→20・21に含まれる話 ",,,非技術項目,
23,障害解析情報が少ない,・statsinfoの利用,開発コミュニティに、故障解析の方法や・コードの体系化を提案する。,エラーメッセージに一意なIDを振る？,○
24,互換性保証がない,,概ね問題はないとバージョンアップ事例の公報等を行い、不安を払拭する。,非技術項目,
25,長期保証されない,,開発コミュニティ側のサポートポリシを広報し、事実を知ってもらう。,非技術項目,
26,リリーススケジュールが決まっていない,,過去の実績事例（リリースまでの期間等）を収集・公報する。,非技術項目,
27,推奨の監視対象が確立されていない,,"①監視ソフトウェアに対する標準の監視プラグインの提供（例：Zabbix）
②技術情報（運用の勘所）の提供",pg_monz登場,
28,バックアップ機能の不足,・pg_rmanの利用,,差分バックアップの提案がコミュニティにあり,○
29,スナップショット機能の不足,,,,
30,監査手法が確立されていない,"・PISOの利用
ログや統計情報を使用した定期的な監視方法の提示。",（ログに依存しない稼働情報手段の実装？）,変わりなし,
31,データ構造/データ定義の互換性情報不足,db-syntax-diff（NTTが作成したOSS、GitHub（https://github.com/db-syntax-diff/db_syntax_diff）で公開）を利用。 ,検証を行い、情報を公開する。,WG2にて情報公開済み,
32,データの互換性情報不足,db-syntax-diff（NTTが作成したOSS、GitHub（https://github.com/db-syntax-diff/db_syntax_diff）で公開）を利用。 ,,WG2にて情報公開済み,
33,SQLなどの互換性情報不足,db-syntax-diff（NTTが作成したOSS、GitHub（https://github.com/db-syntax-diff/db_syntax_diff）で公開）を利用。 ,,WG2にて情報公開済み,
34,ストアドプロシージャに対する移行ノウハウ不足,,公開が可能な範囲で、情報を公開する,WG2にて情報公開済み,
35,自動移行ツールがない,,,変わりなし,
36,移行コストが高い,"・商用DBMSとの差異情報の提供
・定義、データ、SQL文、互換関数についてはツールの提示。","・差異情報や各種移行ツール、互換関数に関する検証結果の蓄積と提示
・PL/pgSQLの変換に関する詳細な手順の提示。",WG2にて情報公開済み,
37,移行コストが見積もれない,案件ごとにサンプリングを行い、移行コストを計上。,（SSMAに類似したアセスメントツールの提供？）,変わりなし,
38,他ソフトウェアと連携できない,,各開発コミュニティに働きかける。,PGEConsとして働きかけはしていない,
39,他ソフトウェアと連携する為に追加開発が必要,,事例を広報する。,非技術項目,
40,組み合わせ（スタック）の不足,,事例を広報する。,非技術項目,
41,技術者が不足,,,非技術項目,
42,既存技術の転用ノウハウ不足,,,非技術項目,
43,技術者評価の仕組み不足,OSS-DB(LPIが実施している認定試験制度（http://www.oss-db.jp/））を利用する。,,非技術項目,
44,新規導入事例の不足,,事例を広報する。,非技術項目,
45,移行事例の不足,,事例を広報する。,非技術項目,
46,情報の精度にばらつき,※対処方法が無いので、検討から除外する,,非技術項目,
